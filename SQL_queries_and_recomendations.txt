        Задание 2
Ниже 2 задачи на проверку знаний SQL.
Для решения заданий следует использовать синтаксис - PostgreSQL. Ответы нужно представить в виде файла с запросами.
Схема данных = структура Базы данных ● Это название таблицы
○ Это название столбца/колонки
-------------------------------------
        1. Написать 2 SQL запроса для поиска значений среднего и медианы по сумме продажи. Сумму транзакции округляем до целой части. Нельзя использовать стандартные функции среднего и медианы в SQL. Можно использовать только агр функции SUM и COUNT.
  
Схема данных:
● orders
○ id
○ sale_amount - в центах ○ user_id
○ datetime
        
        
**РЕШЕНИЕ** 

Средняя
select round(sum(sale_amount)/count(id)) as mean
from orders;

Медиана      
select percentile_cont(0.5) within group(order by sale_amount) median_total_per_user
from orders
-------------------------------------


    2. Написать SQL-запрос для поиска задублированных в результате ошибки транзакций.
Схема данных: ● purchases
○ transaction_id
○ datetime ○ amount ○ user_id

**РЕШЕНИЕ** 
With data as (
  Select
   *,
   row_number() over (partition by transaction_id, datetime, amount, user_id order by user_id) as rowNumber 
  from purchases 
)
Select
  * 
from data 
where
 rowNumber > 1
------------------------------------- 
 
 
    3. Написать SQL-запрос для построения воронки перехода из установки в оформление пробного периода и в покупку платной версии приложения в разрезе стран. На одного юзера возможна только одно оформление пробного периода и одна покупка платной версии. Покупка возможна только после истечения срока пробного периода. На выходе должна получится таблица с колонками “country”, “installs”, “trials”, “purchases”, “conversion_rate_to_trial”, “conversion_rate_to_purchase”
Схема данных: ● events
○ transaction_id
○ datetime
○ event_type (значение может быть либо “instal”, либо “trial”, либо “purchase”) ○ user_id
○ country

**РЕШЕНИЕ** 
Так как в задании ничего не сказано про ограничение по времени, то мы можем посчитать общее количество установок, запусков пробных периодов и покупок за этот промежуток времени.
Но правильнее было бы не считать тех, у кого еще не закончился пробный период, так как они будут портить % успешных установок после истечения пробного периода (conversion_rate_to_purchase)

select country, 
count(user_id) FILTER (WHERE event_type = 'instal') AS installs,
count(user_id) FILTER (WHERE event_type = 'trial') AS trials,
count(user_id) FILTER (WHERE event_type = 'purchase') AS purchases,
count(user_id) FILTER (WHERE event_type = 'trial')/count(user_id) FILTER (WHERE event_type = 'instal') as conversion_rate_to_trial,
count(user_id) FILTER (WHERE event_type = 'purchase')/count(user_id) FILTER (WHERE event_type = 'trial') as conversion_rate_to_purchase
from events
group by country
------------------------------------- 


Задание 3
Продуктовый менеджер сформировал гипотезу, что новая версия экрана продаж будет лучше перформить по сравнению со старой, в связи с тем, что на новом экране продаж более понятно описаны преимущества платной версии приложения.
Продуктовый менеджер ожидает увеличение уровня конверсии из установки в покупку платной версии приложения. Приложение тем временем уже очень активно продвигается на рынке, каждый день привлекается в среднем по 30 000 новых пользователей, текущий уровень конверсии из установки в покупку 5%.
Как бы вы предложили проверить данную гипотезу, какие инструменты и тесты бы использовали в процессе проверки?

**РЕКОМЕНДАЦИЯ**

Первый вопрос, на сколько процентов продуктовый менеджер хочет увеличить конверсию?
От этого будет зависеть наша выборка и время для проведения теста.

Или какой MDE (Minimum Detectable Effect) нам нужен?
Ведь, если метрика улучшиться на 0.1% и принесет нам дополнительный 1 000 000 $, и введение продакшн обойдется не больше 5000$ - это один вариант.
Но может быть и такое, что метрика может улучшиться на 20%, а стоимость выхода в продакшн будет выше, чем потенциальный доход - это другой.

Можем использовать простой калькулятор для подсчета выборки:
https://www.evanmiller.org/ab-testing/sample-size.html

Ответ получен? Отлично!

Дальше делим дабл-рандомом новых пользователей, которые установили приложение, чтобы избежать байеса. 
У одной группы будут значения 0 - это контрольная группа (не было изменений, старая версия экрана)
У другой 1 - это тестовая (treatment) группа (новая версия экрана).
Набираем нужное количество и ждем необходимое время.

Проводим АА тест, что система сплитования на сработала без какого-то байесса.
Все ок? Двигаемся дальше...

Отбираем нужные нам метрики. В данном случае это даты, когда проводился тест и столбец со значениями установок и покупок.

Делаем А/Б тест с помощью Т-теста, Манна-Утни, бутстрэпа и смотрим p_values после этих тестов.
Еще как вариант, можно использовать Хи квадрат (но это на всякий случай, чисто любопытсва ради).

Если p_values < 0.05 и метрика улучшилась, то можем смело выкатывать в продакш новую фичу.

Спасибо!


        